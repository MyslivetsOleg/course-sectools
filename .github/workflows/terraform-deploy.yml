name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      vm_count:
        description: "Number of VMs to deploy"
        required: true
        default: "1"

permissions:
  contents: read
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.4.1"
  TF_WORKING_DIR: sectools-terraform-workdir

jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false -upgrade
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} plan -input=false
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve -lock=false -input=false
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}
