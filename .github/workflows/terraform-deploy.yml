name: 'Terraform'

on:
  workflow_dispatch:
    inputs:
      vm_count:
        description: "Number of VMs to deploy"
        required: true
        default: "1"

permissions:
  contents: read
concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: "1.4.1"
  TF_WORKING_DIR: sectools-terraform
  TF_STATE_DIR: /home/srvadmin/sectools-terraform-workdir/state
  TF_STATE_FILE: /home/srvadmin/sectools-terraform-workdir/state/terraform.tfstate


jobs:
  terraform:
    name: 'Terraform'
    runs-on: self-hosted
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4

    - name: Create working directory
      run: mkdir -p ${{ env.TF_STATE_DIR }}

    - name: Terraform Init
      run: |
       terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false -upgrade \
        -backend-config="bucket=sectools-cicd-bucket" \
        -backend-config="key=tfstate/sectools.tfstate" \
        -backend-config="endpoint=http://${{ secrets.SECTOOLS_CICD_MINIO_FQDN }}:9000" \
        -backend-config="access_key=${{ secrets.SECTOOLS_CICD_MINIO_USER }}" \
        -backend-config="secret_key=${{ secrets.SECTOOLS_CICD_MINIO_PWD }}" \
        -backend-config="skip_credentials_validation=true" \
        -backend-config="skip_metadata_api_check=true" \
        -backend-config="force_path_style=true"
      env:
        AWS_REGION: us-east-1
        AWS_ACCESS_KEY_ID: ${{ secrets.SECTOOLS_CICD_MINIO_USER }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.SECTOOLS_CICD_MINIO_PWD }}
        AWS_SKIP_REQUESTING_ACCOUNT_ID: true
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}
        MINIO_ACCESS_KEY: ${{ secrets.SECTOOLS_CICD_MINIO_USER }}
        MINIO_SECRET_KEY: ${{ secrets.SECTOOLS_CICD_MINIO_PWD }}
        
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    # - name: Terraform Init
    #  run: terraform -chdir=${{ env.TF_WORKING_DIR }} init -input=false -upgrade
    #  env:
    #    TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
    #   TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
    #    TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Validate
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} validate -no-color

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform -chdir=${{ env.TF_WORKING_DIR }} plan -input=false -state=${{ env.TF_STATE_DIR }}/terraform.tfstate 
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply      
      run: |
        terraform -chdir=${{ env.TF_WORKING_DIR }} apply -auto-approve -input=false 
        cp ${{ env.TF_WORKING_DIR }}/terraform.tfstate ${{ env.TF_STATE_FILE }}
      env:
        TF_VAR_opennebula_username: ${{ secrets.ONE_USERNAME }}
        TF_VAR_opennebula_password: ${{ secrets.ONE_PASSWORD }}
        TF_VAR_vm_count: ${{ github.event.inputs.vm_count }}




